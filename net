UnetGenerator_(
  (model): UnetSkipConnectionBlock_(
    (model): Sequential(
      (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (1): Sequential(
        (0): LeakyReLU(negative_slope=0.2, inplace)
        (1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): Sequential(
          (0): LeakyReLU(negative_slope=0.2, inplace)
          (1): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
          (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): Sequential()
            (0): LeakyReLU(negative_slope=0.2, inplace)
            (1): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
            (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): Sequential(
              (0): LeakyReLU(negative_slope=0.2, inplace)
              (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
              (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): Sequential(
                (0): LeakyReLU(negative_slope=0.2, inplace)
                (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (3): Sequential(
                  (0): LeakyReLU(negative_slope=0.2, inplace)
                  (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                  (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (3): Sequential(
                    (0): LeakyReLU(negative_slope=0.2, inplace)
                    (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                    (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (3): Sequential(
                      (0): LeakyReLU(negative_slope=0.2, inplace)
                      (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                      (2): ReLU(inplace)
                      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    )
                    (4): ReLU(inplace)
                    (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                    (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (7): Dropout(p=0.5)
                  )
                  (4): ReLU(inplace)
                  (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                  (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (7): Dropout(p=0.5)
                )
                (4): ReLU(inplace)
                (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (7): Dropout(p=0.5)
              )
              (4): ReLU(inplace)
              (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
              (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): Dropout(p=0.5)
            )
            (4): ReLU(inplace)
            (5): ConvTranspose2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
            (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): ReLU(inplace)
          (5): ConvTranspose2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
          (6): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (4): ReLU(inplace)
        (5): ConvTranspose2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): ReLU(inplace)
      (3): ConvTranspose2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (4): Tanh()
    )
    (model_m): Sequential(
      (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (1): Sequential(
        (0): LeakyReLU(negative_slope=0.2, inplace)
        (1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): Sequential(
          (0): LeakyReLU(negative_slope=0.2, inplace)
          (1): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
          (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): Sequential(
            (0): LeakyReLU(negative_slope=0.2, inplace)
            (1): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
            (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (3): Sequential(
              (0): LeakyReLU(negative_slope=0.2, inplace)
              (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
              (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (3): Sequential(
                (0): LeakyReLU(negative_slope=0.2, inplace)
                (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (3): Sequential(
                  (0): LeakyReLU(negative_slope=0.2, inplace)
                  (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                  (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (3): Sequential(
                    (0): LeakyReLU(negative_slope=0.2, inplace)
                    (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                    (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (3): Sequential(
                      (0): LeakyReLU(negative_slope=0.2, inplace)
                      (1): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                      (2): ReLU(inplace)
                      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    )
                    (4): ReLU(inplace)
                    (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                    (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (7): Dropout(p=0.5)
                  )
                  (4): ReLU(inplace)
                  (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                  (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (7): Dropout(p=0.5)
                )
                (4): ReLU(inplace)
                (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
                (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (7): Dropout(p=0.5)
              )
              (4): ReLU(inplace)
              (5): ConvTranspose2d(1024, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
              (6): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (7): Dropout(p=0.5)
            )
            (4): ReLU(inplace)
            (5): ConvTranspose2d(1024, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
            (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (4): ReLU(inplace)
          (5): ConvTranspose2d(512, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
          (6): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (4): ReLU(inplace)
        (5): ConvTranspose2d(256, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (6): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): ReLU(inplace)
      (3): ConvTranspose2d(128, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (4): Tanh()
    )
  )
  (mask_block): Dehaze(
    (relu): LeakyReLU(negative_slope=0.2, inplace)
    (tanh): Tanh()
    (refine1): Conv2d(6, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (refine2): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv1010): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (conv1020): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (conv1030): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (conv1040): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (refine3): Conv2d(24, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (batch1): InstanceNorm2d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
    (mask): Conv2d(3, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (mask_sig): Sigmoid()
    (mask_add): Conv2d(3, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (mask_block2): Dehaze(
    (relu): LeakyReLU(negative_slope=0.2, inplace)
    (tanh): Tanh()
    (refine1): Conv2d(6, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (refine2): Conv2d(20, 20, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv1010): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (conv1020): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (conv1030): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (conv1040): Conv2d(20, 1, kernel_size=(1, 1), stride=(1, 1))
    (refine3): Conv2d(24, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (batch1): InstanceNorm2d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=False)
    (mask): Conv2d(3, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (mask_sig): Sigmoid()
    (mask_add): Conv2d(3, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
